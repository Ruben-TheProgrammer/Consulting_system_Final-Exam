import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Date;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author Guillermo
 */
public class CONSULTA extends javax.swing.JInternalFrame {
    
    Connection coneccionsql;
    Statement sentenciasql;
    DefaultTableModel modelo_tabla;  
    Integer id_consulta;
    /**
     * Creates new form CONSULTA
     */
    public CONSULTA() {
        initComponents();
        coneccionsql = conectar.getConnection();
        CargarPacientes();
        cargarMedicos();
        llenarTablar();        
    }
    private static java.sql.Date convertUtilToSql(java.util.Date uDate) {
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }
    public void llenarTablar() {
        try {
            //encabezados de la tabla
            String[] titulos = {"ID", "fecha", "Paciente", "Medico", "diagnostico"};
            String stsql = """
                           SELECT consulta.id_consulta, consulta.fecha, paciente.nombre AS paciente, medico.nombre AS medico, consulta.diagnostico
                            FROM consulta JOIN paciente ON paciente.id_paciente = consulta.id_paciente 
                           JOIN medico ON medico.id_medico = consulta.id_medico""";
            modelo_tabla = new DefaultTableModel(null, titulos);
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);

            //arreglo fila, para almacenar registros
            String[] fila = new String[5];
            //while para insertar registros en la tabla
            while (rs.next()) {
                fila[0] = rs.getString("id_consulta");
                fila[1] = rs.getString("fecha");
                fila[2] = rs.getString("paciente");
                fila[3] = rs.getString("medico");
                fila[4] = rs.getString("diagnostico");
                modelo_tabla.addRow(fila);
            }

            //agrego el default model
            tablaVentas.setModel(modelo_tabla);

            //definir el ancho de las columnas
            int[] anchos = {50, 100, 100, 100,100};
            for (int i = 0; i < tablaVentas.getColumnCount(); i++) {
                tablaVentas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    void CargarPacientes() {
        try {
            String stsql = "select * from paciente order by nombre";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            while (rs.next()) {
                 comboPaciente.addItem(rs.getString("nombre"));
            }
            rs.close();
        } catch (Exception e) {
            System.err.println("ERROR AL INTENTAR LISTAR LOS pacientes:" + e);
        }
    }
    void cargarMedicos(){
        try{
            String stsql = "select * from medico order by nombre";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            while (rs.next()){
                comboMedico.addItem(rs.getString("nombre"));
            }
            rs.close();
        } catch (Exception e){
            System.err.println("Error al intentar Listar los medicos:" + e);
        }
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CampoDiagnostico = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboPaciente = new javax.swing.JComboBox<>();
        botonEditar = new javax.swing.JButton();
        comboMedico = new javax.swing.JComboBox<>();
        BotonBorrar = new javax.swing.JButton();
        BotonGuardar = new javax.swing.JButton();
        campoFecha = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);

        jLabel2.setText("Paciente:");

        jLabel3.setText("Medico");

        comboPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPacienteActionPerformed(evt);
            }
        });

        botonEditar.setText("EDITAR");
        botonEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarMouseClicked(evt);
            }
        });

        BotonBorrar.setText("BORRAR");
        BotonBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonBorrarMouseClicked(evt);
            }
        });

        BotonGuardar.setText("GUARDAR");
        BotonGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarMouseClicked(evt);
            }
        });

        campoFecha.setDateFormatString("dd/MM/yyyy");

        jLabel4.setText("Fecha");

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaVentasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaVentas);

        jLabel5.setText("Diagnostico:");

        jLabel1.setText("REALIZAR CONSULTA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboMedico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CampoDiagnostico)
                                    .addComponent(campoFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(BotonGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(botonEditar)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(comboMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(CampoDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEditar)
                            .addComponent(BotonGuardar)
                            .addComponent(BotonBorrar)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Integer buscarPaciente(String nombre_paciente) {
        try {
            String stsql = "SELECT id_paciente FROM paciente WHERE nombre = '"+nombre_paciente+"'";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            if (rs.next()) {
                return rs.getInt("id_paciente");
            } else {
                return null;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el id del paciente");
        }
        return null;
    }
        Integer buscarMedico(String nombre_medico) {
        try {
            String stsql = "SELECT id_medico FROM medico WHERE nombre = '"+nombre_medico+"'";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            if (rs.next()) {
                return rs.getInt("id_medico");
            } else {
                return null;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el id del medico");
        }
        return null;
    }
    private void comboPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPacienteActionPerformed

    private void botonEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarMouseClicked
        // TODO add your handling code here:
        try {
            java.util.Date fecha_venta = campoFecha.getDate();
            String nombre_cliente = comboPaciente.getSelectedItem().toString();
            String nombre_producto = comboMedico.getSelectedItem().toString();
            String cantidad = CampoDiagnostico.getText();

            //Guardar en la base de datos
            String stactualizar = "UPDATE consulta SET fecha=?, id_paciente=?, id_medico=?, diagnostico=? WHERE id_consulta=?";
            PreparedStatement ps = coneccionsql.prepareStatement(stactualizar);
            ps.setDate(1, convertUtilToSql(fecha_venta));
            ps.setInt(2, buscarPaciente(nombre_cliente));
            ps.setInt(3, buscarMedico(nombre_producto));
            ps.setString(4, cantidad);
            ps.setInt(5, id_consulta);

            int n = ps.executeUpdate();
            if (n > 0) {
                //limpiar formulario
                CampoDiagnostico.setText("");

                //reiniciar el estado de los botones
                BotonGuardar.setVisible(false);
                botonEditar.setVisible(true);

                llenarTablar();
                JOptionPane.showMessageDialog(this, "Se actualizo correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar");
            }
            ps.close();

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(rootPane, "Error: No se podo Editar al cliente!");
        }
    }//GEN-LAST:event_botonEditarMouseClicked

    private void BotonBorrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonBorrarMouseClicked
        // TODO add your handling code here:
        try {
            //Borrar registro en la base de datos
            String stborrar = "DELETE FROM consulta WHERE id_consulta =" + id_consulta;
            PreparedStatement ps = coneccionsql.prepareStatement(stborrar);
            int n = ps.executeUpdate();
            if (n > 0) {
                JOptionPane.showMessageDialog(this, "Se borro correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al borrar");
            }
            ps.close();

            llenarTablar();
            //limpiar formulario
            CampoDiagnostico.setText("");

            //Reiniciar el estado de los botones
            BotonGuardar.setVisible(true);
            botonEditar.setVisible(false);
            BotonBorrar.setVisible(false);

        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_BotonBorrarMouseClicked

    private void BotonGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarMouseClicked
        try{
            java.util.Date fecha_venta = campoFecha.getDate();
            String nombre_paciente = comboPaciente.getSelectedItem().toString();
            String nombre_medico = comboMedico.getSelectedItem().toString();
            String cantidad = CampoDiagnostico.getText();

            String sqlguardar = "INSERT INTO consulta (fecha, id_paciente, id_medico, diagnostico) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = coneccionsql.prepareStatement(sqlguardar);
            ps.setDate(1, convertUtilToSql(fecha_venta));
            ps.setInt(2, buscarPaciente(nombre_paciente));
            ps.setInt(3, buscarMedico(nombre_medico));
            ps.setString(4, cantidad);

            int n = ps.executeUpdate();
            if (n > 0) {
                CampoDiagnostico.setText("");

                llenarTablar();
                JOptionPane.showMessageDialog(this, "Se guardó correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al guardar");
            }
            ps.close();
        }catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(rootPane, "Error: No se podo registrar al cliente!");
        }
    }//GEN-LAST:event_BotonGuardarMouseClicked

    private void tablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentasMouseClicked
        if (evt.getButton() == 1) {
            int fila = tablaVentas.getSelectedRow();
            try {
                String stsql = "SELECT consulta.id_consulta, consulta.fecha, paciente.nombre AS paciente, medico.nombre AS medico, consulta.diagnostico FROM consulta JOIN paciente ON paciente.id_paciente = consulta.id_paciente JOIN medico ON medico.id_medico = consulta.id_medico WHERE consulta.id_consulta = " + tablaVentas.getValueAt(fila, 0);
                sentenciasql = coneccionsql.createStatement();
                ResultSet rs = sentenciasql.executeQuery(stsql);
                rs.next();

                id_consulta = rs.getInt("id_consulta");
                campoFecha.setDate(rs.getDate("fecha"));
                comboPaciente.setSelectedItem(rs.getString("paciente"));
                comboMedico.setSelectedItem(rs.getString("medico"));
                CampoDiagnostico.setText(rs.getString("diagnostico"));

                botonEditar.setVisible(true);
                BotonGuardar.setVisible(false);
                BotonBorrar.setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_tablaVentasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBorrar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JTextField CampoDiagnostico;
    private javax.swing.JButton botonEditar;
    private com.toedter.calendar.JDateChooser campoFecha;
    private javax.swing.JComboBox<String> comboMedico;
    private javax.swing.JComboBox<String> comboPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables
}
